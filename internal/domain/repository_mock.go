// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=repository_mock.go -package=domain
//
// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheRepository is a mock of CacheRepository interface.
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository.
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance.
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// DeleteWalletByUserPhone mocks base method.
func (m *MockCacheRepository) DeleteWalletByUserPhone(ctx context.Context, phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWalletByUserPhone", ctx, phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWalletByUserPhone indicates an expected call of DeleteWalletByUserPhone.
func (mr *MockCacheRepositoryMockRecorder) DeleteWalletByUserPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWalletByUserPhone", reflect.TypeOf((*MockCacheRepository)(nil).DeleteWalletByUserPhone), ctx, phone)
}

// FindUserByPhone mocks base method.
func (m *MockCacheRepository) FindUserByPhone(ctx context.Context, phone string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", ctx, phone)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockCacheRepositoryMockRecorder) FindUserByPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockCacheRepository)(nil).FindUserByPhone), ctx, phone)
}

// FindWalletByUserPhone mocks base method.
func (m *MockCacheRepository) FindWalletByUserPhone(ctx context.Context, phone string) (Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWalletByUserPhone", ctx, phone)
	ret0, _ := ret[0].(Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWalletByUserPhone indicates an expected call of FindWalletByUserPhone.
func (mr *MockCacheRepositoryMockRecorder) FindWalletByUserPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWalletByUserPhone", reflect.TypeOf((*MockCacheRepository)(nil).FindWalletByUserPhone), ctx, phone)
}

// InsertWalletByUserPhone mocks base method.
func (m *MockCacheRepository) InsertWalletByUserPhone(ctx context.Context, phone string, wallet Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWalletByUserPhone", ctx, phone, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWalletByUserPhone indicates an expected call of InsertWalletByUserPhone.
func (mr *MockCacheRepositoryMockRecorder) InsertWalletByUserPhone(ctx, phone, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWalletByUserPhone", reflect.TypeOf((*MockCacheRepository)(nil).InsertWalletByUserPhone), ctx, phone, wallet)
}

// MockDatabaseRepository is a mock of DatabaseRepository interface.
type MockDatabaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepositoryMockRecorder
}

// MockDatabaseRepositoryMockRecorder is the mock recorder for MockDatabaseRepository.
type MockDatabaseRepositoryMockRecorder struct {
	mock *MockDatabaseRepository
}

// NewMockDatabaseRepository creates a new mock instance.
func NewMockDatabaseRepository(ctrl *gomock.Controller) *MockDatabaseRepository {
	mock := &MockDatabaseRepository{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepository) EXPECT() *MockDatabaseRepositoryMockRecorder {
	return m.recorder
}

// FindUserByPhone mocks base method.
func (m *MockDatabaseRepository) FindUserByPhone(ctx context.Context, phone string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByPhone", ctx, phone)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByPhone indicates an expected call of FindUserByPhone.
func (mr *MockDatabaseRepositoryMockRecorder) FindUserByPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByPhone", reflect.TypeOf((*MockDatabaseRepository)(nil).FindUserByPhone), ctx, phone)
}

// FindWalletByUserPhone mocks base method.
func (m *MockDatabaseRepository) FindWalletByUserPhone(ctx context.Context, phone string) (Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWalletByUserPhone", ctx, phone)
	ret0, _ := ret[0].(Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWalletByUserPhone indicates an expected call of FindWalletByUserPhone.
func (mr *MockDatabaseRepositoryMockRecorder) FindWalletByUserPhone(ctx, phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWalletByUserPhone", reflect.TypeOf((*MockDatabaseRepository)(nil).FindWalletByUserPhone), ctx, phone)
}

// InsertTransaction mocks base method.
func (m *MockDatabaseRepository) InsertTransaction(ctx context.Context, transaction Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockDatabaseRepositoryMockRecorder) InsertTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockDatabaseRepository)(nil).InsertTransaction), ctx, transaction)
}

// InsertUser mocks base method.
func (m *MockDatabaseRepository) InsertUser(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDatabaseRepositoryMockRecorder) InsertUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseRepository)(nil).InsertUser), ctx, user)
}

// InsertWallet mocks base method.
func (m *MockDatabaseRepository) InsertWallet(ctx context.Context, wallet Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWallet indicates an expected call of InsertWallet.
func (mr *MockDatabaseRepositoryMockRecorder) InsertWallet(ctx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWallet", reflect.TypeOf((*MockDatabaseRepository)(nil).InsertWallet), ctx, wallet)
}

// UpdateWallet mocks base method.
func (m *MockDatabaseRepository) UpdateWallet(ctx context.Context, wallet Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockDatabaseRepositoryMockRecorder) UpdateWallet(ctx, wallet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockDatabaseRepository)(nil).UpdateWallet), ctx, wallet)
}
